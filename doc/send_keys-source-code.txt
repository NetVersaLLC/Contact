
# Universal Send Kets for Watir and Watir-webdriver ... source code


class Watir-Keys #Watir-Keys
	KEYS = {
	  # keycodes from http://msdn.microsoft.com/en-us/library/ms927178.aspx
	  :null => 0x00,
	  :cancel => 0x03,
	  :help => 0x2F,
	  :backspace => 0x08,
	  :tab => 0x09,
	  :clear => 0x0C,
	  :return => 0x0D,
	  :enter => 0x0D,
	  :shift => 0x10,
	  :left_shift => 0xA0,
	  :control => 0x11,
	  :left_control => 0xA2,
	  :alt => 0x12,
	  :left_alt => 0xA4,
	  :pause => 0x13,
	  :escape => 0x1B,
	  :space => 0x20,
	  :page_up => 0x21,
	  :page_down => 0x22,
	  :end => 0x23,
	  :home => 0x24,
	  :left => 0x25,
	  :arrow_left => 0x25,
	  :up => 0x26,
	  :arrow_up => 0x26,
	  :right => 0x27,
	  :arrow_right => 0x27,
	  :down => 0x28,
	  :arrow_down => 0x28,
	  :insert => 0x2D,
	  :delete => 0x2E,
	  :semicolon => 0x3B,
	  :equals => 0x3D,
	  :numpad0 => 0x60,
	  :numpad1 => 0x61,
	  :numpad2 => 0x62,
	  :numpad3 => 0x63,
	  :numpad4 => 0x64,
	  :numpad5 => 0x65,
	  :numpad6 => 0x66,
	  :numpad7 => 0x67,
	  :numpad8 => 0x68,
	  :numpad9 => 0x69,
	  :multiply => 0x6A,
	  :add => 0x6B,
	  :separator => 0x6C,
	  :subtract => 0x6D,
	  :decimal => 0x6E,
	  :divide => 0x6F,
	  :f1 => 0x70,
	  :f2 => 0x71,
	  :f3 => 0x72,
	  :f4 => 0x73,
	  :f5 => 0x74,
	  :f6 => 0x75,
	  :f7 => 0x76,
	  :f8 => 0x77,
	  :f9 => 0x78,
	  :f10 => 0x79,
	  :f11 => 0x7A,
	  :f12 => 0x7B,
	}

	SPECIAL_KEYS = {
	  "!" => 0x31,
	  "@" => 0x32,
	  "#" => 0x33,
	  "$" => 0x34,
	  "%" => 0x35,
	  "^" => 0x36,
	  "&" => 0x37,
	  "*" => 0x38,
	  "(" => 0x39,
	  ")" => 0x30,
	  "_" => 0x2D,
	  "+" => 0x3D,
	  "{" => 0x5B,
	  "}" => 0x5D,
	  ":" => 0x3B,
	  "\"" => 0x27,
	  "|" => 0x5C,
	  "?" => 0x2F,
	  ">" => 0x2E,
	  "<" => 0x2C
	}

	def self.[](key)
	  KEYS[key] or raise "unsupported key #{key.inspect}"
	end

	def self.encode(keys)
	  keys.reduce([]) do |converted, key|
	    if key.is_a?(Symbol)
	      converted << Keys[key]
	    elsif key.is_a?(Array)
	      converted << (key.map {|k| encode([k])} << Keys[:null]).flatten
	    else # key is a string
	      converted += encode_str(key)
	    end
	    converted
	  end
	end

	def self.encode_str(keys)
	  keys.to_s.split("").map do |key|
	    key =~ /[a-z]/ ? key.upcase.unpack("c")[0] :
	      key =~ /[A-Z]/ || SPECIAL_KEYS[key] ? [Keys[:shift], SPECIAL_KEYS[key] || key.unpack("c")[0], Keys[:null]] :
	      key.unpack("c")[0]
	end
end # Watir-Keys

module WebDriver
    module Keys

      #
      # @see Element#send_keys
      # @see http://www.google.com.au/search?&q=unicode+pua&btnG=Search
      #

      KEYS = {
      # \x works on both 1.8.6/1.9
        :null         => "\xEE\x80\x80",
        :cancel       => "\xEE\x80\x81",
        :help         => "\xEE\x80\x82",
        :backspace    => "\xEE\x80\x83",
        :tab          => "\xEE\x80\x84",
        :clear        => "\xEE\x80\x85",
        :return       => "\xEE\x80\x86",
        :enter        => "\xEE\x80\x87",
        :shift        => "\xEE\x80\x88",
        :left_shift   => "\xEE\x80\x88",
        :control      => "\xEE\x80\x89",
        :left_control => "\xEE\x80\x89",
        :alt          => "\xEE\x80\x8A",
        :left_alt     => "\xEE\x80\x8A",
        :pause        => "\xEE\x80\x8B",
        :escape       => "\xEE\x80\x8C",
        :space        => "\xEE\x80\x8D",
        :page_up      => "\xEE\x80\x8E",
        :page_down    => "\xEE\x80\x8F",
        :end          => "\xEE\x80\x90",
        :home         => "\xEE\x80\x91",
        :left         => "\xEE\x80\x92",
        :arrow_left   => "\xEE\x80\x92",
        :up           => "\xEE\x80\x93",
        :arrow_up     => "\xEE\x80\x93",
        :right        => "\xEE\x80\x94",
        :arrow_right  => "\xEE\x80\x94",
        :down         => "\xEE\x80\x95",
        :arrow_down   => "\xEE\x80\x95",
        :insert       => "\xEE\x80\x96",
        :delete       => "\xEE\x80\x97",
        :semicolon    => "\xEE\x80\x98",
        :equals       => "\xEE\x80\x99",
        :numpad0      => "\xEE\x80\x9A",
        :numpad1      => "\xEE\x80\x9B",
        :numpad2      => "\xEE\x80\x9C",
        :numpad3      => "\xEE\x80\x9D",
        :numpad4      => "\xEE\x80\x9E",
        :numpad5      => "\xEE\x80\x9F",
        :numpad6      => "\xEE\x80\xA0",
        :numpad7      => "\xEE\x80\xA1",
        :numpad8      => "\xEE\x80\xA2",
        :numpad9      => "\xEE\x80\xA3",
        :multiply     => "\xEE\x80\xA4",
        :add          => "\xEE\x80\xA5",
        :separator    => "\xEE\x80\xA6",
        :subtract     => "\xEE\x80\xA7",
        :decimal      => "\xEE\x80\xA8",
        :divide       => "\xEE\x80\xA9",
        :f1           => "\xEE\x80\xB1",
        :f2           => "\xEE\x80\xB2",
        :f3           => "\xEE\x80\xB3",
        :f4           => "\xEE\x80\xB4",
        :f5           => "\xEE\x80\xB5",
        :f6           => "\xEE\x80\xB6",
        :f7           => "\xEE\x80\xB7",
        :f8           => "\xEE\x80\xB8",
        :f9           => "\xEE\x80\xB9",
        :f10          => "\xEE\x80\xBA",
        :f11          => "\xEE\x80\xBB",
        :f12          => "\xEE\x80\xBC",
        :meta         => "\xEE\x80\xBD",
        :command      => "\xEE\x80\xBD" # alias
      }

      #
      # @api private
      #

      def self.[](key)
        KEYS[key] or raise Error::UnsupportedOperationError, "no such key #{key.inspect}"
      end

      #
      # @api private
      #

      def self.encode(keys)
        keys.map do |arg|
          case arg
          when Symbol
            Keys[arg]
          when Array
            arg = arg.map { |e| e.kind_of?(Symbol) ? Keys[e] : e }.join
            arg << Keys[:null]

            arg
          else
            arg.to_s
          end
        end
      end

    end # Keys
end # WebDriver

