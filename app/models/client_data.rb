class ClientData < ActiveRecord::Base
  self.abstract_class = true
  belongs_to      :business
  attr_accessible :force_update
  serialize       :secrets, CerebusClient.new
  after_find      :deserialize_attributes
  before_save     :serialize_attributes
  @@custom_attributes = {}

  # This reads @@custom_attributes which is generated by the
  # virtual_attr_accessor method. It then records only the mentioned
  # attrs and serilizes them into self.secrets
  def serialize_attributes
    @metadata = {}
    STDERR.puts "serialize_attributes: #{@attributes.inspect}"
    @@custom_attributes.each_key do |sym|
      @metadata[sym] = self.send(sym)
    end
    self.secrets = @metadata
  end

  # This loads the virtual attributes from the hash
  def deserialize_attributes
    STDERR.puts "deserialize_attributes()"
    @@custom_attributes.each_key do |sym|
      self.send(sym.to_s+'=', self[:secrets][sym.to_s])
    end
  end

  # This is a class method, which records the custom attrs in a class variable
  # then defines the accessors for the variables on the class.
  def self.virtual_attr_accessor(*args)
    STDERR.puts "virtual_attr_accessor()"
    @@custom_attributes ||= {}
    args.each do |sym|
      @@custom_attributes[sym] = nil
    end
    attr_accessor *args
    attr_accessible *args
  end

  def force_update= val
    force_update_will_change!
    @roce_update = Time.now
  end
end
